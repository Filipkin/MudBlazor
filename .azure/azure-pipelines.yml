trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  majorV: 1
  minorV: 0
  patch: $[counter(variables['minorV'], 0)] #this will reset when we bump minor
  nugetVersion : $(majorV).$(minorV).$(patch)

steps:

- task: NuGetToolInstaller@1
  displayName: 'Installing nuget tool'

- task: DotNetCoreCLI@2
  displayName: dotnet restore
  inputs:
    command: restore
    projects: '**/MudBlazor.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Building library'
  condition: succeeded()
  inputs:
    command: 'build'
    projects: '**/MudBlazor.csproj'
    configuration: '$(buildConfiguration)'
    arguments: '-c Release'

- task: DotNetCoreCLI@2
  displayName: 'Packing library'
  condition: succeeded()
  inputs:
    command: 'pack'
    packagesToPack: '**/MudBlazor.csproj'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'NugetVersion'
    nobuild: true
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Pushing packages'
  condition: and( succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '1cc2e30c-e568-415d-bb34-644a12140b44'
    nobuild: true
    buildProperties: 'PackageID=PRG.$(ProjectName).' # <-- This is new

- task: SendTelegramNotification@0
  displayName: 'Sending telegram notification'
  condition: and(ne(variables['Build.Reason'], 'PullRequest'), succeeded())
  inputs:
    botToken: '1186262266:AAHz9AGk5iTZ_D02nt7vVfmz4XnCAhRnols'
    chats: '-1001415745681'
    teamUrl: true
    message: '$(Build.Repository.Name) - $(Build.SourceVersionMessage).  Публикация библиотек PRGMudBlazor'
    buildNumber: true



